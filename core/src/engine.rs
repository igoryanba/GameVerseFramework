//! # –ò–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ GameVerse
//!
//! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ API –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
//! –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ FiveM: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, type safety, –ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

use anyhow::{Result, Context};
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{info, debug, warn, error};

use crate::game_integration::{GameIntegrator, GameType, IntegrationState};

/// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
#[derive(Debug)]
pub struct GameEngine {
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞
    initialized: bool,
    /// –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å –∏–≥—Ä–æ–π
    game_integrator: Option<Arc<RwLock<GameIntegrator>>>,
    /// –¢–∏–ø –∏–≥—Ä—ã
    game_type: Option<GameType>,
}

impl GameEngine {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
    pub fn new() -> Self {
        Self {
            initialized: false,
            game_integrator: None,
            game_type: None,
        }
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
    pub fn for_game(game_type: GameType) -> Self {
        Self {
            initialized: false,
            game_integrator: None,
            game_type: Some(game_type),
        }
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–æ–∫
    pub async fn initialize(&mut self) -> Result<()> {
        if self.initialized {
            return Ok(());
        }

        info!("üéÆ Initializing GameVerse Engine...");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        let game_type = match self.game_type {
            Some(gt) => gt,
            None => self.detect_game_type().await?,
        };

        info!("üéØ Detected game type: {:?}", game_type);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å –∏–≥—Ä–æ–π
        let integrator = GameIntegrator::new(game_type).await
            .context("Failed to create game integrator")?;

        self.game_integrator = Some(Arc::new(RwLock::new(integrator)));
        self.game_type = Some(game_type);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–≥—Ä–µ
        self.connect_to_game().await
            .context("Failed to connect to game")?;

        self.initialized = true;
        info!("‚úÖ GameVerse Engine initialized successfully");

        Ok(())
    }

    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—ã
    async fn detect_game_type(&self) -> Result<GameType> {
        info!("üîç Auto-detecting game type...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        if self.is_process_running("GTA5.exe").await || self.is_process_running("FiveM.exe").await {
            info!("üéØ Detected GTA V");
            return Ok(GameType::GtaV);
        }

        if self.is_process_running("RDR2.exe").await || self.is_process_running("RedM.exe").await {
            info!("üéØ Detected RDR2");
            return Ok(GameType::Rdr2);
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é GTA V
        warn!("‚ö†Ô∏è Could not detect game type, defaulting to GTA V");
        Ok(GameType::GtaV)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    async fn is_process_running(&self, process_name: &str) -> bool {
        #[cfg(windows)]
        {
            use windows::Win32::System::Diagnostics::ToolHelp::*;
            use windows::Win32::Foundation::*;

            unsafe {
                if let Ok(snapshot) = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0) {
                    let mut entry = PROCESSENTRY32W {
                        dwSize: std::mem::size_of::<PROCESSENTRY32W>() as u32,
                        ..Default::default()
                    };

                    if Process32FirstW(snapshot, &mut entry).is_ok() {
                        loop {
                            let current_name = String::from_utf16_lossy(&entry.szExeFile)
                                .trim_end_matches('\0');

                            if current_name.eq_ignore_ascii_case(process_name) {
                                CloseHandle(snapshot);
                                return true;
                            }

                            if Process32NextW(snapshot, &mut entry).is_err() {
                                break;
                            }
                        }
                    }

                    CloseHandle(snapshot);
                }
            }
        }

        #[cfg(unix)]
        {
            use std::fs;
            use std::str::FromStr;

            if let Ok(proc_dir) = fs::read_dir("/proc") {
                for entry in proc_dir.flatten() {
                    let path = entry.path();
                    
                    if let Some(pid_str) = path.file_name().and_then(|n| n.to_str()) {
                        if u32::from_str(pid_str).is_ok() {
                            let comm_path = path.join("comm");
                            if let Ok(comm) = fs::read_to_string(comm_path) {
                                let comm = comm.trim();
                                if comm.eq_ignore_ascii_case(process_name) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        false
    }

    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
    async fn connect_to_game(&mut self) -> Result<()> {
        if let Some(integrator_arc) = &self.game_integrator {
            let mut integrator = integrator_arc.write().await;
            integrator.connect().await
                .context("Failed to establish game connection")?;

            info!("üîó Successfully connected to game");
        }

        Ok(())
    }

    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã
    pub async fn disconnect_from_game(&mut self) -> Result<()> {
        if let Some(integrator_arc) = &self.game_integrator {
            let mut integrator = integrator_arc.write().await;
            integrator.disconnect().await
                .context("Failed to disconnect from game")?;

            info!("üîå Disconnected from game");
        }

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å –∏–≥—Ä–æ–π
    pub fn game_integrator(&self) -> Option<Arc<RwLock<GameIntegrator>>> {
        self.game_integrator.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—ã
    pub fn game_type(&self) -> Option<GameType> {
        self.game_type
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
    pub async fn connection_state(&self) -> Option<IntegrationState> {
        if let Some(integrator_arc) = &self.game_integrator {
            let integrator = integrator_arc.read().await;
            Some(integrator.state())
        } else {
            None
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    pub fn is_initialized(&self) -> bool {
        self.initialized
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤–∏–∂–æ–∫
    pub async fn shutdown(&mut self) -> Result<()> {
        if !self.initialized {
            return Ok(());
        }

        info!("üõë Shutting down GameVerse Engine...");

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∏–≥—Ä—ã
        self.disconnect_from_game().await?;

        self.game_integrator = None;
        self.initialized = false;

        info!("‚úÖ GameVerse Engine shut down successfully");
        Ok(())
    }
}

impl Default for GameEngine {
    fn default() -> Self {
        Self::new()
    }
}

impl Drop for GameEngine {
    fn drop(&mut self) {
        if self.initialized {
            warn!("GameEngine dropped while still initialized - this may cause issues");
        }
    }
} 