//! # Game Integration Layer
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (GTA V, RDR2).
//! –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ FiveM:
//! - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å Rust –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
//! - Type-safe native calls
//! - Memory-safe –∏–≥—Ä–æ–≤—ã–µ —Ö—É–∫–∏
//! - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
//! - Cross-platform –ø–æ–¥–¥–µ—Ä–∂–∫–∞

pub mod game_hook;
pub mod memory_manager;
pub mod native_executor;
pub mod player_manager;
pub mod event_system;

use anyhow::Result;
use std::sync::Arc;
use tokio::sync::RwLock;

/// –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å –∏–≥—Ä–æ–π
#[derive(Debug)]
pub struct GameIntegrator {
    /// –•—É–∫ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
    game_hook: Arc<RwLock<game_hook::GameHook>>,
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –∏–≥—Ä—ã
    memory_manager: Arc<RwLock<memory_manager::MemoryManager>>,
    /// –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    native_executor: Arc<RwLock<native_executor::NativeExecutor>>,
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    player_manager: Arc<RwLock<player_manager::PlayerManager>>,
    /// –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    event_system: Arc<event_system::EventSystem>,
    /// –¢–∏–ø –∏–≥—Ä—ã
    game_type: GameType,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_state: IntegrationState,
}

/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GameType {
    /// Grand Theft Auto V
    GtaV,
    /// Red Dead Redemption 2
    Rdr2,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–π
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum IntegrationState {
    /// –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
    Disconnected,
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    Connecting,
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ
    Connected,
    /// –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    Error,
}

impl GameIntegrator {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    pub async fn new(game_type: GameType) -> Result<Self> {
        let game_hook = Arc::new(RwLock::new(game_hook::GameHook::new(game_type).await?));
        let memory_manager = Arc::new(RwLock::new(memory_manager::MemoryManager::new(game_type).await?));
        let native_executor = Arc::new(RwLock::new(native_executor::NativeExecutor::new(
            game_type,
            memory_manager.clone()
        ).await?));
        let player_manager = Arc::new(RwLock::new(player_manager::PlayerManager::new()));
        let event_system = Arc::new(event_system::EventSystem::new());

        Ok(Self {
            game_hook,
            memory_manager,
            native_executor,
            player_manager,
            event_system,
            game_type,
            integration_state: IntegrationState::Disconnected,
        })
    }

    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
    pub async fn connect(&mut self) -> Result<()> {
        self.integration_state = IntegrationState::Connecting;
        
        tracing::info!("üéÆ Connecting to {:?} game process...", self.game_type);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        {
            let mut hook = self.game_hook.write().await;
            hook.attach().await?;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
        {
            let mut memory_manager = self.memory_manager.write().await;
            memory_manager.set_game_hook(self.game_hook.clone());
            memory_manager.initialize().await?;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—Ç–∏–≤–æ–≤
        {
            let mut native_executor = self.native_executor.write().await;
            native_executor.initialize().await?;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
        self.event_system.initialize().await?;

        self.integration_state = IntegrationState::Connected;
        
        tracing::info!("‚úÖ Successfully connected to {:?} game process", self.game_type);
        
        Ok(())
    }

    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã
    pub async fn disconnect(&mut self) -> Result<()> {
        tracing::info!("üîå Disconnecting from {:?} game process...", self.game_type);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
        self.event_system.shutdown().await?;

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        {
            let mut hook = self.game_hook.write().await;
            hook.detach().await?;
        }

        self.integration_state = IntegrationState::Disconnected;
        
        tracing::info!("‚úÖ Successfully disconnected from game process");
        
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    pub fn state(&self) -> IntegrationState {
        self.integration_state
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—ã
    pub fn game_type(&self) -> GameType {
        self.game_type
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    pub fn native_executor(&self) -> Arc<RwLock<native_executor::NativeExecutor>> {
        self.native_executor.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    pub fn player_manager(&self) -> Arc<RwLock<player_manager::PlayerManager>> {
        self.player_manager.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
    pub fn event_system(&self) -> Arc<event_system::EventSystem> {
        self.event_system.clone()
    }
}

impl Drop for GameIntegrator {
    fn drop(&mut self) {
        if self.integration_state == IntegrationState::Connected {
            tracing::warn!("GameIntegrator dropped while still connected - this may cause issues");
        }
    }
} 