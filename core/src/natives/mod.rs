//! # Native Functions Integration
//!
//! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π GameVerse.
//! –°–≤—è–∑—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Rust wrappers —Å runtime –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.

pub mod registry;
pub mod wrapper;
pub mod executor_bridge;

use anyhow::{Result, Context};
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{info, debug, warn, error};

use crate::game_integration::{GameType, native_executor::{NativeExecutor, NativeValue}};

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
pub type NativeResult = Result<NativeValue>;

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#[derive(Debug)]
pub struct NativeManager {
    /// –†–µ–µ—Å—Ç—Ä –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    registry: registry::NativeRegistry,
    /// –ú–æ—Å—Ç –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor_bridge: Option<Arc<RwLock<executor_bridge::ExecutorBridge>>>,
    /// –¢–∏–ø –∏–≥—Ä—ã
    game_type: GameType,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialized: bool,
}

impl NativeManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Ç–∏–≤–æ–≤
    pub fn new(game_type: GameType) -> Self {
        Self {
            registry: registry::NativeRegistry::new(),
            executor_bridge: None,
            game_type,
            initialized: false,
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
    pub async fn initialize(&mut self, native_executor: Arc<RwLock<NativeExecutor>>) -> Result<()> {
        if self.initialized {
            return Ok(());
        }

        info!("üîß Initializing native manager for {:?}...", self.game_type);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        self.load_generated_natives().await
            .context("Failed to load generated natives")?;

        // –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        let bridge = executor_bridge::ExecutorBridge::new(native_executor, self.game_type).await?;
        self.executor_bridge = Some(Arc::new(RwLock::new(bridge)));

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ—Å—Ç—É
        self.register_natives_in_bridge().await
            .context("Failed to register natives in bridge")?;

        self.initialized = true;
        info!("‚úÖ Native manager initialized with {} functions", self.registry.count());

        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async fn load_generated_natives(&mut self) -> Result<()> {
        debug!("Loading generated native functions...");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
        match self.game_type {
            GameType::GtaV => self.load_gta5_natives().await?,
            GameType::Rdr2 => self.load_rdr2_natives().await?,
        }

        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Ç–∏–≤—ã GTA V
    async fn load_gta5_natives(&mut self) -> Result<()> {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ native-generator
        // –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤

        self.registry.register_function(
            0x4F8644AF03D0E0D6, // GET_PLAYER_PED
            "GET_PLAYER_PED".to_string(),
            vec!["playerId".to_string()],
            "Entity".to_string(),
        )?;

        self.registry.register_function(
            0x6E192E33AD436366, // GET_ENTITY_COORDS
            "GET_ENTITY_COORDS".to_string(),
            vec!["entity".to_string()],
            "Vector3".to_string(),
        )?;

        self.registry.register_function(
            0x06843DA7060A026B, // SET_ENTITY_COORDS
            "SET_ENTITY_COORDS".to_string(),
            vec!["entity".to_string(), "x".to_string(), "y".to_string(), "z".to_string()],
            "void".to_string(),
        )?;

        debug!("Loaded {} GTA V native functions", self.registry.count());
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Ç–∏–≤—ã RDR2
    async fn load_rdr2_natives(&mut self) -> Result<()> {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è RDR2
        self.registry.register_function(
            0x275F255ED201B937, // GET_PLAYER_PED
            "GET_PLAYER_PED".to_string(),
            vec!["playerId".to_string()],
            "Entity".to_string(),
        )?;

        debug!("Loaded {} RDR2 native functions", self.registry.count());
        Ok(())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ç–∏–≤—ã –≤ –º–æ—Å—Ç—É
    async fn register_natives_in_bridge(&self) -> Result<()> {
        if let Some(bridge) = &self.executor_bridge {
            for function in self.registry.get_all_functions() {
                bridge.write().await.register_function(function.clone())?;
            }
        }

        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
    pub async fn call_native(&self, name: &str, args: Vec<NativeValue>) -> Result<NativeValue> {
        if !self.initialized {
            anyhow::bail!("Native manager not initialized");
        }

        if let Some(bridge) = &self.executor_bridge {
            bridge.read().await.call_by_name(name, args).await
        } else {
            anyhow::bail!("Executor bridge not available")
        }
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ —Ö–µ—à—É
    pub async fn call_native_by_hash(&self, hash: u64, args: Vec<NativeValue>) -> Result<NativeValue> {
        if !self.initialized {
            anyhow::bail!("Native manager not initialized");
        }

        if let Some(bridge) = &self.executor_bridge {
            bridge.read().await.call_by_hash(hash, args).await
        } else {
            anyhow::bail!("Executor bridge not available")
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏
    pub fn get_function_info(&self, name: &str) -> Option<&registry::NativeFunctionInfo> {
        self.registry.get_function_by_name(name)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    pub fn list_functions(&self) -> Vec<&registry::NativeFunctionInfo> {
        self.registry.get_all_functions()
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    pub fn is_initialized(&self) -> bool {
        self.initialized
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    pub fn function_count(&self) -> usize {
        self.registry.count()
    }
}

// –£–¥–æ–±–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞—Ç–∏–≤–æ–≤
#[macro_export]
macro_rules! call_native {
    ($manager:expr, $name:expr, $($arg:expr),*) => {
        $manager.call_native($name, vec![$($arg),*]).await
    };
}

#[macro_export]
macro_rules! call_native_hash {
    ($manager:expr, $hash:expr, $($arg:expr),*) => {
        $manager.call_native_by_hash($hash, vec![$($arg),*]).await
    };
} 