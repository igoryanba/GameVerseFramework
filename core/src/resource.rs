//! # –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ GameVerse
//!
//! –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ FiveM —Ä–µ—Å—É—Ä—Å–∞–º–∏:
//! - TOML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ fxmanifest.lua
//! - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
//! - Hot reload –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
//! - –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å semver
//! - Type safety –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

use anyhow::Result;
use std::collections::HashMap;
use std::path::PathBuf;
use serde::{Deserialize, Serialize};

/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
#[derive(Debug)]
pub struct ResourceManager {
    /// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    resources: HashMap<String, Resource>,
    /// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    resources_directory: PathBuf,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialized: bool,
}

/// –†–µ—Å—É—Ä—Å GameVerse
#[derive(Debug, Clone)]
pub struct Resource {
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    pub id: String,
    /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    pub name: String,
    /// –í–µ—Ä—Å–∏—è (semver)
    pub version: String,
    /// –ê–≤—Ç–æ—Ä
    pub author: String,
    /// –û–ø–∏—Å–∞–Ω–∏–µ
    pub description: String,
    /// –ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É
    pub path: PathBuf,
    /// –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–µ—Å—É—Ä—Å–∞
    pub manifest: ResourceManifest,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    pub state: ResourceState,
}

/// –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–µ—Å—É—Ä—Å–∞ (gameverse.toml)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResourceManifest {
    /// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–∞
    pub resource: ResourceMetadata,
    /// –°–∫—Ä–∏–ø—Ç—ã —Ä–µ—Å—É—Ä—Å–∞
    pub scripts: Option<ResourceScripts>,
    /// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pub dependencies: Option<Vec<ResourceDependency>>,
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    pub config: Option<toml::Value>,
}

/// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResourceMetadata {
    /// –ù–∞–∑–≤–∞–Ω–∏–µ
    pub name: String,
    /// –í–µ—Ä—Å–∏—è
    pub version: String,
    /// –ê–≤—Ç–æ—Ä
    pub author: String,
    /// –û–ø–∏—Å–∞–Ω–∏–µ
    pub description: String,
    /// –í–µ–±-—Å–∞–π—Ç
    pub website: Option<String>,
    /// –õ–∏—Ü–µ–Ω–∑–∏—è
    pub license: Option<String>,
    /// –¢–µ–≥–∏
    pub tags: Option<Vec<String>>,
}

/// –°–∫—Ä–∏–ø—Ç—ã —Ä–µ—Å—É—Ä—Å–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResourceScripts {
    /// –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    pub server: Option<Vec<String>>,
    /// –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    pub client: Option<Vec<String>>,
    /// –û–±—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    pub shared: Option<Vec<String>>,
}

/// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResourceDependency {
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pub name: String,
    /// –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –≤–µ—Ä—Å–∏–∏
    pub version: String,
    /// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    pub required: Option<bool>,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ResourceState {
    /// –†–µ—Å—É—Ä—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    Found,
    /// –†–µ—Å—É—Ä—Å –∑–∞–≥—Ä—É–∂–µ–Ω
    Loaded,
    /// –†–µ—Å—É—Ä—Å –∑–∞–ø—É—â–µ–Ω
    Started,
    /// –†–µ—Å—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    Stopped,
    /// –û—à–∏–±–∫–∞ –≤ —Ä–µ—Å—É—Ä—Å–µ
    Error,
}

impl ResourceManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    pub fn new(resources_directory: PathBuf) -> Self {
        Self {
            resources: HashMap::new(),
            resources_directory,
            initialized: false,
        }
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    pub async fn initialize(&mut self) -> Result<()> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.initialized = true;
        tracing::info!(
            "üî• Resource manager initialized with TOML configs and hot reload support"
        );
        Ok(())
    }
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å
    pub async fn load_resource(&mut self, resource_name: &str) -> Result<()> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ gameverse.toml
        tracing::info!("Loading resource: {}", resource_name);
        Ok(())
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å
    pub async fn start_resource(&mut self, resource_name: &str) -> Result<()> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Ä–µ—Å—É—Ä—Å–∞
        tracing::info!("Starting resource: {}", resource_name);
        Ok(())
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å
    pub async fn stop_resource(&mut self, resource_name: &str) -> Result<()> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ—Å—É—Ä—Å–∞
        tracing::info!("Stopping resource: {}", resource_name);
        Ok(())
    }
    
    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å (hot reload)
    pub async fn reload_resource(&mut self, resource_name: &str) -> Result<()> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å hot reload —Ä–µ—Å—É—Ä—Å–∞
        tracing::info!("Hot reloading resource: {}", resource_name);
        Ok(())
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    pub fn list_resources(&self) -> Vec<&Resource> {
        self.resources.values().collect()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å –ø–æ –∏–º–µ–Ω–∏
    pub fn get_resource(&self, name: &str) -> Option<&Resource> {
        self.resources.get(name)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    pub fn is_initialized(&self) -> bool {
        self.initialized
    }
}

impl Default for ResourceManager {
    fn default() -> Self {
        Self::new(PathBuf::from("resources"))
    }
}

// –ü—Ä–∏–º–µ—Ä gameverse.toml –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
// 
// ```toml
// [resource]
// name = "my-awesome-resource"
// version = "1.0.0"
// author = "GameVerse Developer" 
// description = "An awesome resource for GameVerse"
// website = "https://gameverse.dev"
// license = "MIT"
// tags = ["economy", "roleplay"]
//
// [scripts]
// server = ["server/main.ts", "server/events.ts"]
// client = ["client/ui.tsx", "client/events.ts"]
// shared = ["shared/config.ts"]
//
// [[dependencies]]
// name = "gameverse-core"
// version = ">=0.1.0"
// required = true
//
// [config]
// database_url = "postgresql://localhost/mydb"
// max_players = 64
// ``` 