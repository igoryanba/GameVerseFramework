//! # –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω—Ç–∞–π–º GameVerse
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞,
//! –≤–∫–ª—é—á–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.

use std::path::{Path, PathBuf};
use std::sync::{Arc, atomic::{AtomicBool, Ordering}};
use tokio::sync::mpsc;
use anyhow::{Result, Context};
use tracing::{info, error, warn, debug};
use std::time::{Instant};
use serde_json;

use crate::config::{self, Config};
use crate::engine::GameEngine;
use crate::resource::ResourceManager;
use crate::net::NetworkManager;
use crate::logging;

/// –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
#[derive(Debug, Clone)]
pub enum ServerCommand {
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    Shutdown,
    /// –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    Restart,
    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
    ReloadResources,
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    RequestStatus,
}

/// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum ServerStatus {
    /// –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    Starting,
    /// –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    Running,
    /// –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    Stopping,
    /// –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    Stopped,
    /// –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    Error,
}

/// –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω—Ç–∞–π–º
pub struct ServerRuntime {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    config: Config,
    /// –ò–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
    engine: GameEngine,
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    resource_manager: ResourceManager,
    /// –°–µ—Ç–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
    network_manager: NetworkManager,
    /// –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    status: ServerStatus,
    /// –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    running: Arc<AtomicBool>,
    /// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ —Å–µ—Ä–≤–µ—Ä—É
    command_tx: mpsc::Sender<ServerCommand>,
    /// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å–µ—Ä–≤–µ—Ä–æ–º
    command_rx: mpsc::Receiver<ServerCommand>,
    /// –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dev_mode: bool,
    /// –ü—É—Ç—å –∫ IPC —Å–æ–∫–µ—Ç—É (—Ç–æ–ª—å–∫–æ Unix)
    #[cfg(unix)]
    ipc_path: PathBuf,
    /// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    start_time: Instant,
}

impl ServerRuntime {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–Ω—Ç–∞–π–º–∞
    pub fn new(config_path: Option<&Path>, dev_mode: bool) -> Result<Self> {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let config_path_str = config_path.map(|p| p.to_string_lossy().to_string());
        let config = config::load_config(config_path_str.as_deref())
            .context("Failed to load server configuration")?;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        let log_config = config.to_log_config();
        logging::initialize_with_config(log_config)
            .context("Failed to initialize logging")?;
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–º–∞–Ω–¥
        let (command_tx, command_rx) = mpsc::channel(100);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        let engine = GameEngine::new();
        let resource_manager = ResourceManager::new(config.server.resources_path.clone().into());
        let network_manager = NetworkManager::new();
        
        Ok(Self {
            config,
            engine,
            resource_manager,
            network_manager,
            status: ServerStatus::Stopped,
            running: Arc::new(AtomicBool::new(false)),
            command_tx,
            command_rx,
            dev_mode,
            #[cfg(unix)]
            ipc_path: PathBuf::from("/tmp/gameverse_server.sock"),
            start_time: Instant::now(),
        })
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    pub async fn start(&mut self) -> Result<()> {
        self.status = ServerStatus::Starting;
        info!("Starting GameVerse server '{}'...", self.config.server.name);
        
        if self.dev_mode {
            info!("üîß Running in DEVELOPMENT mode");
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.initialize_components().await?;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º IPC-—Å–ª—É—à–∞—Ç–µ–ª—å (Unix)
        #[cfg(unix)]
        self.spawn_ipc_listener()?;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º IPC-—Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ Windows (Named Pipe)
        #[cfg(windows)]
        self.spawn_ipc_listener()?;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.running.store(true, Ordering::SeqCst);
        self.status = ServerStatus::Running;
        
        info!("üöÄ GameVerse server started successfully");
        info!("Server is listening on {}:{}", 
            self.config.server.bind_address, 
            self.config.server.port
        );
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–µ—Ä–≤–µ—Ä–∞
        self.run_server_loop().await?;
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        self.shutdown().await?;
        
        Ok(())
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    async fn initialize_components(&mut self) -> Result<()> {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
        debug!("Initializing game engine...");
        self.engine.initialize().await
            .context("Failed to initialize game engine")?;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
        debug!("Initializing resource manager...");
        self.resource_manager.initialize().await
            .context("Failed to initialize resource manager")?;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–π —Å—Ç–µ–∫
        debug!("Initializing network stack...");
        self.network_manager.initialize().await
            .context("Failed to initialize network manager")?;
        
        Ok(())
    }
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–µ—Ä–≤–µ—Ä–∞
    async fn run_server_loop(&mut self) -> Result<()> {
        info!("Server is running. Press Ctrl+C to stop.");
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C
        let running = self.running.clone();
        tokio::spawn(async move {
            match tokio::signal::ctrl_c().await {
                Ok(()) => {
                    info!("Shutdown signal received");
                    running.store(false, Ordering::SeqCst);
                },
                Err(err) => {
                    error!("Failed to listen for shutdown signal: {}", err);
                }
            }
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        while self.running.load(Ordering::SeqCst) {
            tokio::select! {
                Some(cmd) = self.command_rx.recv() => {
                    self.handle_command(cmd).await?;
                }
                _ = tokio::time::sleep(tokio::time::Duration::from_millis(100)) => {
                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                }
            }
        }
        
        Ok(())
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
    async fn handle_command(&mut self, command: ServerCommand) -> Result<()> {
        match command {
            ServerCommand::Shutdown => {
                info!("Received shutdown command");
                self.running.store(false, Ordering::SeqCst);
            }
            ServerCommand::Restart => {
                info!("Received restart command");
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
                warn!("Server restart not yet implemented");
            }
            ServerCommand::ReloadResources => {
                info!("Received reload resources command");
                // –ò–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π: –∫–æ–ø–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
                let resource_names: Vec<String> = self
                    .resource_manager
                    .list_resources()
                    .iter()
                    .map(|res| res.name.clone())
                    .collect();

                for name in resource_names {
                    if let Err(e) = self.resource_manager.reload_resource(&name).await {
                        error!("Failed to reload resource {}: {}", name, e);
                    }
                }
            }
            ServerCommand::RequestStatus => {
                info!("Server status: {:?}", self.status);
                // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞
            }
        }
        
        Ok(())
    }
    
    /// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞
    async fn shutdown(&mut self) -> Result<()> {
        self.status = ServerStatus::Stopping;
        info!("Shutting down GameVerse server...");
        
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ: —Å–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º stop_resource
        let resource_names: Vec<String> = self
            .resource_manager
            .list_resources()
            .iter()
            .map(|res| res.name.clone())
            .collect();

        for name in resource_names {
            if let Err(e) = self.resource_manager.stop_resource(&name).await {
                error!("Failed to stop resource {}: {}", name, e);
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        self.status = ServerStatus::Stopped;
        info!("Server shutdown complete");
        
        Ok(())
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    pub fn status(&self) -> ServerStatus {
        self.status.clone()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º –∏–∑–≤–Ω–µ
    pub fn command_sender(&self) -> mpsc::Sender<ServerCommand> {
        self.command_tx.clone()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    pub fn is_running(&self) -> bool {
        self.running.load(Ordering::SeqCst)
    }

    #[cfg(unix)]
    fn spawn_ipc_listener(&self) -> Result<()> {
        use tokio::net::UnixListener;
        use tokio::io::{AsyncReadExt, AsyncWriteExt};

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.ipc_path.exists() {
            std::fs::remove_file(&self.ipc_path)?;
        }

        let listener = UnixListener::bind(&self.ipc_path)?;
        info!("IPC listener started at {}", self.ipc_path.display());

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥
        let cmd_tx = self.command_tx.clone();
        let running_flag = self.running.clone();

        // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –∫–ª–æ–Ω–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        let resource_manager = self.resource_manager.clone();
        let network_manager = self.network_manager.clone();

        tokio::spawn(async move {
            loop {
                match listener.accept().await {
                    Ok((mut stream, _addr)) => {
                        let mut buf = Vec::new();
                        if let Ok(_n) = stream.read_to_end(&mut buf).await {
                            if buf.is_empty() {
                                continue;
                            }
                            let msg = String::from_utf8_lossy(&buf);
                            let cmd_str = msg.trim().to_lowercase();
                            let cmd_opt = match cmd_str.as_str() {
                                "shutdown" => Some(ServerCommand::Shutdown),
                                "reload" | "reload_resources" => Some(ServerCommand::ReloadResources),
                                "status" => Some(ServerCommand::RequestStatus),
                                _ => None,
                            };
                            if let Some(ref c) = cmd_opt {
                                let _ = cmd_tx.send(c.clone()).await;
                            }

                            // –§–æ—Ä–º–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
                            let reply = match cmd_opt {
                                Some(ServerCommand::RequestStatus) => {
                                    let uptime_secs = self.start_time.elapsed().as_secs();
                                    let status_json = serde_json::json!({
                                        "status": if running_flag.load(Ordering::SeqCst) {"running"} else {"stopped"},
                                        "uptime_secs": uptime_secs,
                                        "players": network_manager.get_connection_stats().total(),
                                        "resources": resource_manager.list_resources().len()
                                    });
                                    status_json.to_string()
                                }
                                Some(_) => "ok".to_string(),
                                None => "unknown".to_string(),
                            };
                            let _ = stream.write_all(reply.as_bytes()).await;
                        }
                    }
                    Err(e) => {
                        error!("IPC accept error: {}", e);
                    }
                }
            }
        });

        Ok(())
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç IPC-—Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ Windows (Named Pipe)
    #[cfg(windows)]
    fn spawn_ipc_listener(&self) -> Result<()> {
        use tokio::net::windows::named_pipe::{ServerOptions, NamedPipeServer};
        use tokio::io::{AsyncReadExt, AsyncWriteExt};

        // –ò–º—è –ø–∞–π–ø–∞
        const PIPE_NAME: &str = r"\\.\pipe\gameverse_server";

        // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–∞–π–ø (first instance)
        let server: NamedPipeServer = ServerOptions::new()
            .first_pipe_instance(true)
            .create(PIPE_NAME)?;

        tracing::info!("IPC listener started at {} (named pipe)", PIPE_NAME);

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã/—Ñ–ª–∞–≥–∏/–º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        let cmd_tx = self.command_tx.clone();
        let running_flag = self.running.clone();
        let resource_manager = self.resource_manager.clone();
        let network_manager = self.network_manager.clone();
        let start_time = self.start_time;

        tokio::spawn(async move {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            let mut server = server;
            loop {
                // –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                match server.connect().await {
                    Ok(()) => {
                        let mut buf = Vec::new();
                        if let Ok(_n) = server.read_to_end(&mut buf).await {
                            if buf.is_empty() {
                                let _ = server.disconnect();
                                continue;
                            }
                            let msg = String::from_utf8_lossy(&buf);
                            let cmd_str = msg.trim().to_lowercase();
                            let cmd_opt = match cmd_str.as_str() {
                                "shutdown" => Some(ServerCommand::Shutdown),
                                "reload" | "reload_resources" => Some(ServerCommand::ReloadResources),
                                "status" => Some(ServerCommand::RequestStatus),
                                _ => None,
                            };

                            if let Some(ref c) = cmd_opt {
                                let _ = cmd_tx.send(c.clone()).await;
                            }

                            // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
                            let reply = match cmd_opt {
                                Some(ServerCommand::RequestStatus) => {
                                    let uptime_secs = start_time.elapsed().as_secs();
                                    let status_json = serde_json::json!({
                                        "status": if running_flag.load(std::sync::atomic::Ordering::SeqCst) {"running"} else {"stopped"},
                                        "uptime_secs": uptime_secs,
                                        "players": network_manager.get_connection_stats().total(),
                                        "resources": resource_manager.list_resources().len()
                                    });
                                    status_json.to_string()
                                }
                                Some(_) => "ok".to_string(),
                                None => "unknown".to_string(),
                            };

                            let _ = server.write_all(reply.as_bytes()).await;
                        }

                        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        let _ = server.disconnect();
                    }
                    Err(e) => {
                        tracing::error!("IPC accept error (named pipe): {}", e);
                        // –ë–µ–∑ sleep loop –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç CPU. –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
                        tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
                    }
                }
            }
        });

        Ok(())
    }
}

#[cfg(test)]
mod runtime_tests; 