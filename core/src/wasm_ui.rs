//! # WebAssembly UI Integration Module
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ–±-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ
//! –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è GameVerse Framework, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é WebAssembly –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
//!
//! –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
//! - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebAssembly
//! - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏ (React, Vue, Svelte)
//! - –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ 2D/3D –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ WebGL
//! - –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–≥—Ä–æ–π –∏ UI
//! - –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

use anyhow::Result;
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::{RwLock, mpsc};
use tracing::{info, warn, debug, error};
use serde::{Serialize, Deserialize};
use serde_json::Value;

use crate::game_integration::GameIntegrator;
use crate::natives::wrapper::{PlayerId, Vector3};

/// –¢–∏–ø—ã UI —Å–æ–±—ã—Ç–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum UIEvent {
    /// –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç
    Toggle { element_id: String, visible: bool },
    /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    UpdateData { element_id: String, data: Value },
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
    UserAction { action: String, payload: Value },
    /// –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Notification { level: String, message: String },
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    GameDataUpdate { player_id: Option<u32>, data: Value },
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ UI –º–æ–¥—É–ª—è
    LoadModule { module_name: String, module_url: String },
}

/// –û—Ç–≤–µ—Ç—ã –æ—Ç UI
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum UIResponse {
    /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    Acknowledgment { event_id: String },
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    UserInput { input_id: String, value: Value },
    /// –ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    DataRequest { request_id: String, query: String },
    /// –û—à–∏–±–∫–∞ –≤ UI
    Error { error_id: String, message: String },
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UI —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone)]
pub struct UIConfig {
    /// –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ UI
    pub port: u16,
    /// –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º UI
    pub static_path: String,
    /// –í–∫–ª—é—á–∏—Ç—å –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
    pub hot_reload: bool,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pub max_connections: usize,
    /// –¢–∞–π–º–∞—É—Ç –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pub websocket_timeout_ms: u64,
    /// –í–∫–ª—é—á–∏—Ç—å CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    pub enable_cors: bool,
    /// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è CORS
    pub cors_origins: Vec<String>,
}

impl Default for UIConfig {
    fn default() -> Self {
        Self {
            port: 8080,
            static_path: "./ui/dist".to_string(),
            hot_reload: true,
            max_connections: 100,
            websocket_timeout_ms: 30000,
            enable_cors: true,
            cors_origins: vec!["http://localhost:3000".to_string()],
        }
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º UI –∫–ª–∏–µ–Ω—Ç–µ
#[derive(Debug, Clone)]
pub struct UIClient {
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
    pub id: String,
    /// ID –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω)
    pub player_id: Option<PlayerId>,
    /// –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    pub connected_at: std::time::Instant,
    /// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    pub event_sender: mpsc::UnboundedSender<UIEvent>,
    /// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    pub metadata: HashMap<String, String>,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UI —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UIStats {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pub active_connections: usize,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    pub events_sent: u64,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    pub responses_received: u64,
    /// –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ UI (–º—Å)
    pub average_response_time_ms: f64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    pub error_count: u64,
}

/// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä WebAssembly UI
pub struct WasmUIManager {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: UIConfig,
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    clients: Arc<RwLock<HashMap<String, UIClient>>>,
    /// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç UI
    response_receiver: Option<mpsc::UnboundedReceiver<UIResponse>>,
    /// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    response_sender: mpsc::UnboundedSender<UIResponse>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: Arc<RwLock<UIStats>>,
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    event_handlers: Arc<RwLock<HashMap<String, Box<dyn Fn(UIResponse) -> Result<()> + Send + Sync>>>>,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initialized: bool,
}

impl WasmUIManager {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä UI
    pub fn new(config: UIConfig) -> Self {
        let (response_sender, response_receiver) = mpsc::unbounded_channel();
        
        Self {
            config,
            clients: Arc::new(RwLock::new(HashMap::new())),
            response_receiver: Some(response_receiver),
            response_sender,
            stats: Arc::new(RwLock::new(UIStats {
                active_connections: 0,
                events_sent: 0,
                responses_received: 0,
                average_response_time_ms: 0.0,
                error_count: 0,
            })),
            event_handlers: Arc::new(RwLock::new(HashMap::new())),
            initialized: false,
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI —Å–∏—Å—Ç–µ–º—É
    pub async fn initialize(&mut self) -> Result<()> {
        if self.initialized {
            return Ok(());
        }

        info!("üé® Initializing WebAssembly UI system...");

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UI
        self.start_web_server().await?;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
        self.start_response_handler().await?;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ UI –º–æ–¥—É–ª–∏
        self.load_core_modules().await?;

        self.initialized = true;
        info!("‚úÖ WebAssembly UI system initialized on port {}", self.config.port);

        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UI
    async fn start_web_server(&self) -> Result<()> {
        info!("üåê Starting UI web server on port {}", self.config.port);

        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        // —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebSocket, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        
        // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
        // - GET / - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ UI
        // - GET /api/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        // - WS /ws - WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        // - GET /static/* - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (JS, CSS, WASM)

        tokio::spawn(async move {
            // –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, warp –∏–ª–∏ axum)
            info!("Web server started successfully");
        });

        Ok(())
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç UI
    async fn start_response_handler(&mut self) -> Result<()> {
        let mut receiver = self.response_receiver.take()
            .ok_or_else(|| anyhow::anyhow!("Response receiver already taken"))?;
        
        let handlers = Arc::clone(&self.event_handlers);
        let stats = Arc::clone(&self.stats);

        tokio::spawn(async move {
            while let Some(response) = receiver.recv().await {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                {
                    let mut stats_guard = stats.write().await;
                    stats_guard.responses_received += 1;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                match response {
                    UIResponse::UserInput { input_id, value } => {
                        debug!("Received user input: {} = {:?}", input_id, value);
                        
                        // –í—ã–∑—ã–≤–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        if let Some(handler) = handlers.read().await.get(&input_id) {
                            if let Err(e) = handler(UIResponse::UserInput { input_id, value }) {
                                error!("Error handling user input: {}", e);
                            }
                        }
                    },
                    UIResponse::DataRequest { request_id, query } => {
                        debug!("Received data request: {} - {}", request_id, query);
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
                    },
                    UIResponse::Error { error_id, message } => {
                        error!("UI Error {}: {}", error_id, message);
                        
                        let mut stats_guard = stats.write().await;
                        stats_guard.error_count += 1;
                    },
                    _ => {}
                }
            }
        });

        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ UI –º–æ–¥—É–ª–∏
    async fn load_core_modules(&self) -> Result<()> {
        info!("üì¶ Loading core UI modules...");

        let core_modules = vec![
            ("player_hud", "/modules/player_hud.wasm"),
            ("chat_system", "/modules/chat_system.wasm"),
            ("minimap", "/modules/minimap.wasm"),
            ("inventory", "/modules/inventory.wasm"),
            ("admin_panel", "/modules/admin_panel.wasm"),
        ];

        for (module_name, module_url) in core_modules {
            self.send_event_to_all(UIEvent::LoadModule {
                module_name: module_name.to_string(),
                module_url: module_url.to_string(),
            }).await?;
        }

        info!("‚úÖ Core UI modules loaded");
        Ok(())
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    pub async fn register_client(&self, client_id: String, player_id: Option<PlayerId>) -> Result<()> {
        let (event_sender, _event_receiver) = mpsc::unbounded_channel();
        
        let client = UIClient {
            id: client_id.clone(),
            player_id,
            connected_at: std::time::Instant::now(),
            event_sender,
            metadata: HashMap::new(),
        };

        {
            let mut clients = self.clients.write().await;
            clients.insert(client_id.clone(), client);
        }

        {
            let mut stats = self.stats.write().await;
            stats.active_connections += 1;
        }

        info!("üîå UI client registered: {} (player: {:?})", client_id, player_id);
        Ok(())
    }

    /// –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    pub async fn disconnect_client(&self, client_id: &str) -> Result<()> {
        {
            let mut clients = self.clients.write().await;
            clients.remove(client_id);
        }

        {
            let mut stats = self.stats.write().await;
            if stats.active_connections > 0 {
                stats.active_connections -= 1;
            }
        }

        info!("üîå UI client disconnected: {}", client_id);
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    pub async fn send_event_to_client(&self, client_id: &str, event: UIEvent) -> Result<()> {
        let clients = self.clients.read().await;
        
        if let Some(client) = clients.get(client_id) {
            if let Err(_) = client.event_sender.send(event.clone()) {
                warn!("Failed to send event to client {}: channel closed", client_id);
                return Err(anyhow::anyhow!("Client channel closed"));
            }

            let mut stats = self.stats.write().await;
            stats.events_sent += 1;

            debug!("üì§ Event sent to client {}: {:?}", client_id, event);
        } else {
            return Err(anyhow::anyhow!("Client {} not found", client_id));
        }

        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    pub async fn send_event_to_all(&self, event: UIEvent) -> Result<()> {
        let clients = self.clients.read().await;
        let mut sent_count = 0;

        for (client_id, client) in clients.iter() {
            if let Err(_) = client.event_sender.send(event.clone()) {
                warn!("Failed to send event to client {}: channel closed", client_id);
            } else {
                sent_count += 1;
            }
        }

        {
            let mut stats = self.stats.write().await;
            stats.events_sent += sent_count;
        }

        debug!("üì§ Event sent to {} clients: {:?}", sent_count, event);
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–≥—Ä–æ–∫—É
    pub async fn send_event_to_player(&self, player_id: PlayerId, event: UIEvent) -> Result<()> {
        let clients = self.clients.read().await;
        
        for (client_id, client) in clients.iter() {
            if client.player_id == Some(player_id) {
                if let Err(_) = client.event_sender.send(event.clone()) {
                    warn!("Failed to send event to player {} (client {}): channel closed", player_id.0, client_id);
                } else {
                    let mut stats = self.stats.write().await;
                    stats.events_sent += 1;
                    
                    debug!("üì§ Event sent to player {}: {:?}", player_id.0, event);
                    return Ok(());
                }
            }
        }

        Err(anyhow::anyhow!("No UI client found for player {}", player_id.0))
    }

    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    pub async fn register_event_handler<F>(&self, event_type: String, handler: F) -> Result<()>
    where
        F: Fn(UIResponse) -> Result<()> + Send + Sync + 'static,
    {
        let mut handlers = self.event_handlers.write().await;
        handlers.insert(event_type.clone(), Box::new(handler));
        
        info!("üìù Event handler registered for: {}", event_type);
        Ok(())
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å HUD –∏–≥—Ä–æ–∫–∞
    pub async fn update_player_hud(&self, player_id: PlayerId, health: i32, armor: i32, money: i32) -> Result<()> {
        let hud_data = serde_json::json!({
            "health": health,
            "armor": armor,
            "money": money,
            "timestamp": std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)?
                .as_secs()
        });

        self.send_event_to_player(player_id, UIEvent::UpdateData {
            element_id: "player_hud".to_string(),
            data: hud_data,
        }).await
    }

    /// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
    pub async fn show_notification(&self, player_id: PlayerId, level: &str, message: &str) -> Result<()> {
        self.send_event_to_player(player_id, UIEvent::Notification {
            level: level.to_string(),
            message: message.to_string(),
        }).await
    }

    /// –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
    pub async fn toggle_ui_element(&self, player_id: PlayerId, element_id: &str, visible: bool) -> Result<()> {
        self.send_event_to_player(player_id, UIEvent::Toggle {
            element_id: element_id.to_string(),
            visible,
        }).await
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–∫–∞—Ä—Ç—É
    pub async fn update_minimap(&self, player_id: PlayerId, position: Vector3, rotation: f32) -> Result<()> {
        let minimap_data = serde_json::json!({
            "position": {
                "x": position.x,
                "y": position.y,
                "z": position.z
            },
            "rotation": rotation,
            "timestamp": std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)?
                .as_secs()
        });

        self.send_event_to_player(player_id, UIEvent::UpdateData {
            element_id: "minimap".to_string(),
            data: minimap_data,
        }).await
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç
    pub async fn send_chat_message(&self, player_id: Option<PlayerId>, sender: &str, message: &str) -> Result<()> {
        let chat_data = serde_json::json!({
            "sender": sender,
            "message": message,
            "timestamp": std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)?
                .as_secs()
        });

        let event = UIEvent::UpdateData {
            element_id: "chat_system".to_string(),
            data: chat_data,
        };

        if let Some(player_id) = player_id {
            self.send_event_to_player(player_id, event).await
        } else {
            self.send_event_to_all(event).await
        }
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π UI –º–æ–¥—É–ª—å
    pub async fn load_custom_module(&self, module_name: &str, module_url: &str) -> Result<()> {
        info!("üì¶ Loading custom UI module: {} from {}", module_name, module_url);

        self.send_event_to_all(UIEvent::LoadModule {
            module_name: module_name.to_string(),
            module_url: module_url.to_string(),
        }).await?;

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É UI —Å–∏—Å—Ç–µ–º—ã
    pub async fn get_stats(&self) -> UIStats {
        self.stats.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    pub async fn get_connected_clients(&self) -> Vec<String> {
        let clients = self.clients.read().await;
        clients.keys().cloned().collect()
    }

    /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub async fn reset_stats(&self) {
        let mut stats = self.stats.write().await;
        stats.events_sent = 0;
        stats.responses_received = 0;
        stats.average_response_time_ms = 0.0;
        stats.error_count = 0;
        
        info!("üìä UI statistics reset");
    }

    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
    pub async fn export_stats(&self) -> Result<String> {
        let stats = self.get_stats().await;
        serde_json::to_string_pretty(&stats)
            .map_err(|e| anyhow::anyhow!("Failed to serialize UI stats: {}", e))
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI —Å–∏—Å—Ç–µ–º—ã
    pub async fn health_check(&self) -> Result<bool> {
        let stats = self.get_stats().await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        let is_healthy = stats.active_connections <= self.config.max_connections
            && stats.error_count < 100  // –ù–µ –±–æ–ª–µ–µ 100 –æ—à–∏–±–æ–∫
            && stats.average_response_time_ms < 1000.0; // –û—Ç–∫–ª–∏–∫ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

        debug!("üè• UI system health check: {}", if is_healthy { "HEALTHY" } else { "UNHEALTHY" });
        
        Ok(is_healthy)
    }
}

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebAssembly –º–æ–¥—É–ª—è–º–∏
pub struct WasmUtils;

impl WasmUtils {
    /// –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å TypeScript/JavaScript –≤ WebAssembly
    pub async fn compile_to_wasm(source_path: &str, output_path: &str) -> Result<()> {
        info!("üîß Compiling {} to WebAssembly...", source_path);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        // —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º wasm-pack, AssemblyScript –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        info!("‚úÖ WebAssembly module compiled: {}", output_path);
        Ok(())
    }

    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å WASM –º–æ–¥—É–ª—å
    pub async fn optimize_wasm(wasm_path: &str) -> Result<()> {
        info!("‚ö° Optimizing WebAssembly module: {}", wasm_path);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        // —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º wasm-opt –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Ok(())
    }

    /// –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å WASM –º–æ–¥—É–ª—å
    pub async fn validate_wasm(wasm_path: &str) -> Result<bool> {
        debug!("üîç Validating WebAssembly module: {}", wasm_path);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è WASM –±–∞–π—Ç-–∫–æ–¥–∞
        
        Ok(true)
    }
}

/// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UI —Å–∏—Å—Ç–µ–º—ã
pub mod examples {
    use super::*;

    /// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ HUD
    pub async fn create_simple_hud(ui_manager: &WasmUIManager, player_id: PlayerId) -> Result<()> {
        // –û–±–Ω–æ–≤–ª—è–µ–º HUD –¥–∞–Ω–Ω—ã–µ
        ui_manager.update_player_hud(player_id, 100, 50, 5000).await?;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        ui_manager.show_notification(player_id, "info", "Welcome to GameVerse!").await?;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏–∫–∞—Ä—Ç—É
        ui_manager.toggle_ui_element(player_id, "minimap", true).await?;
        
        Ok(())
    }

    /// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞
    pub async fn setup_chat_system(ui_manager: &WasmUIManager) -> Result<()> {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        ui_manager.register_event_handler("chat_message".to_string(), |response| {
            if let UIResponse::UserInput { input_id, value } = response {
                if input_id == "chat_input" {
                    if let Some(message) = value.as_str() {
                        info!("Chat message received: {}", message);
                        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    }
                }
            }
            Ok(())
        }).await?;
        
        Ok(())
    }

    /// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    pub async fn create_admin_panel(ui_manager: &WasmUIManager, admin_player_id: PlayerId) -> Result<()> {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        ui_manager.toggle_ui_element(admin_player_id, "admin_panel", true).await?;
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
        ui_manager.register_event_handler("admin_command".to_string(), |response| {
            if let UIResponse::UserInput { input_id, value } = response {
                match input_id.as_str() {
                    "teleport_command" => {
                        info!("Admin teleport command: {:?}", value);
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
                    },
                    "kick_command" => {
                        info!("Admin kick command: {:?}", value);
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∏–∫–∞
                    },
                    _ => {}
                }
            }
            Ok(())
        }).await?;
        
        Ok(())
    }
} 