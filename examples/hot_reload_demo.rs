use gameverse_core::plugins::{PluginManager, PluginSystemConfig, PluginEvent};
use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::mpsc;
use tokio::time::{sleep, Duration};

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è hot reload —Å–∏—Å—Ç–µ–º—ã GameVerse Framework
/// 
/// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
/// 1. –ó–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–≥–∏–Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏
/// 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
/// 3. Hot reload –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
/// 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ reload
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_target(false)
        .with_thread_ids(true)
        .with_level(true)
        .init();

    println!("üöÄ GameVerse Hot Reload Demo Starting...");
    println!("==========================================");

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–≥–∏–Ω–æ–≤
    let mut plugins_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    plugins_dir.push("examples/plugins");
    
    let config = PluginSystemConfig {
        plugins_directory: plugins_dir.clone(),
        enable_hot_reload: true,
        hot_reload_interval_ms: 500, // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 500–º—Å
        max_plugins: 50,
        sandbox_enabled: true,
        performance_monitoring: true,
        allowed_permissions: vec![
            "economy.*".to_string(),
            "core.*".to_string(),
        ],
    };

    // –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
    let (event_sender, mut event_receiver) = mpsc::unbounded_channel::<PluginEvent>();

    // –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
    let manager = Arc::new(PluginManager::new(config, event_sender).await?);
    
    println!("‚úÖ Plugin manager created");
    println!("üìÅ Watching directory: {}", plugins_dir.display());

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    let event_manager = Arc::clone(&manager);
    let event_handle = tokio::spawn(async move {
        println!("üì® Event processor started");
        
        while let Some(event) = event_receiver.recv().await {
            match &event {
                PluginEvent::Loaded { plugin_id } => {
                    println!("üî• Plugin loaded event: {}", plugin_id);
                }
                PluginEvent::HotReloaded { plugin_id } => {
                    println!("üîÑ Hot reload event detected for: {}", plugin_id);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å hot reload
                    match event_manager.reload_plugin(plugin_id).await {
                        Ok(_) => println!("‚úÖ Hot reload completed successfully!"),
                        Err(e) => println!("‚ùå Hot reload failed: {}", e),
                    }
                }
                PluginEvent::Error { plugin_id, error } => {
                    println!("üö® Plugin error: {} - {}", plugin_id, error);
                }
                _ => {
                    println!("üì® Plugin event: {:?}", event);
                }
            }
        }
    });

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–≥–∏–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏
    println!("\nüì¶ Loading economy plugin...");
    match manager.load_plugin("economy-example").await {
        Ok(_) => {
            println!("‚úÖ Economy plugin loaded successfully!");
            
            // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω
            match manager.start_plugin("economy-example").await {
                Ok(_) => println!("üöÄ Economy plugin started!"),
                Err(e) => println!("‚ö†Ô∏è Failed to start plugin: {}", e),
            }
        }
        Err(e) => {
            println!("‚ùå Failed to load economy plugin: {}", e);
            println!("üí° Note: This is expected if the plugin files don't exist yet");
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤
    let plugins = manager.list_plugins().await;
    println!("\nüìä Loaded plugins: {}", plugins.len());
    for plugin in &plugins {
        println!("   ‚Ä¢ {} v{} by {}", plugin.name, plugin.version, plugin.author);
    }

    println!("\nüî• Hot Reload Demo Active!");
    println!("==========================================");
    println!("To test hot reload:");
    println!("1. Modify files in: {}/economy-example/", plugins_dir.display());
    println!("2. Save any .rs, .toml, .lua, or .tsx file");
    println!("3. Watch the automatic hot reload in action!");
    println!("4. Press Ctrl+C to exit");
    println!("");

    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    let mut iteration = 0;
    loop {
        iteration += 1;
        
        // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if iteration % 20 == 0 {
            println!("\nüìä Server Status (iteration {}):", iteration);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤
            let plugins = manager.list_plugins().await;
            println!("   Active plugins: {}", plugins.len());
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for plugin in &plugins {
                if let Some(stats) = manager.get_plugin_stats(&plugin.id).await {
                    println!("   ‚Ä¢ {}: {} calls, avg: {}Œºs", 
                            plugin.id, 
                            stats.call_count,
                            stats.average_execution_time_us);
                }
            }
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if iteration % 30 == 0 {
            println!("üë§ Simulating player connection...");
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å plugin.on_player_connect()
        }

        sleep(Duration::from_millis(500)).await;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)
        if iteration > 1000 {  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ ~8 –º–∏–Ω—É—Ç
            println!("\n‚è∞ Demo timeout reached, shutting down...");
            break;
        }
    }

    // Graceful shutdown
    println!("\nüõë Shutting down hot reload demo...");
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã
    let plugins = manager.list_plugins().await;
    for plugin in plugins {
        println!("üõë Stopping plugin: {}", plugin.id);
        if let Err(e) = manager.stop_plugin(&plugin.id).await {
            println!("‚ö†Ô∏è Failed to stop plugin {}: {}", plugin.id, e);
        }
        
        if let Err(e) = manager.unload_plugin(&plugin.id).await {
            println!("‚ö†Ô∏è Failed to unload plugin {}: {}", plugin.id, e);
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    drop(event_handle);

    println!("‚úÖ Hot reload demo completed successfully!");
    println!("üìà Performance benefits demonstrated:");
    println!("   ‚Ä¢ Instant plugin reload (vs minutes in FiveM)");
    println!("   ‚Ä¢ No server downtime");
    println!("   ‚Ä¢ Preserved player connections");
    println!("   ‚Ä¢ Type-safe configuration reloading");

    Ok(())
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
impl Default for PluginSystemConfig {
    fn default() -> Self {
        Self {
            plugins_directory: PathBuf::from("plugins"),
            enable_hot_reload: true,
            hot_reload_interval_ms: 1000,
            max_plugins: 10,
            sandbox_enabled: true,
            performance_monitoring: true,
            allowed_permissions: vec!["*".to_string()],
        }
    }
} 