use gameverse_core::plugins::{GameVersePlugin, PluginContext, PluginInfo, PluginResult, PluginError};
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use serde::{Serialize, Deserialize};
use chrono::{DateTime, Utc};

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä–æ–∫–∞ –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EconomyPlayer {
    pub id: u64,
    pub name: String,
    pub cash: f64,
    pub bank_balance: f64,
    pub last_login: DateTime<Utc>,
    pub transaction_history: Vec<Transaction>,
}

/// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Transaction {
    pub id: String,
    pub from_player: Option<u64>,
    pub to_player: Option<u64>,
    pub amount: f64,
    pub transaction_type: TransactionType,
    pub timestamp: DateTime<Utc>,
    pub description: String,
}

/// –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum TransactionType {
    Deposit,    // –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–Ω–∫
    Withdraw,   // –°–Ω—è—Ç–∏–µ –∏–∑ –±–∞–Ω–∫–∞
    Transfer,   // –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
    Purchase,   // –ü–æ–∫—É–ø–∫–∞
    Salary,     // –ó–∞—Ä–ø–ª–∞—Ç–∞
    AdminGive,  // –í—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
}

/// –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏
pub struct EconomyPlugin {
    info: PluginInfo,
    players: Arc<RwLock<HashMap<u64, EconomyPlayer>>>,
    config: EconomyConfig,
    total_money_in_circulation: Arc<RwLock<f64>>,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EconomyConfig {
    pub starting_balance: f64,
    pub max_cash: f64,
    pub transaction_tax: f64,
    pub deposit_interest_rate: f64,
    pub max_loan_amount: f64,
    pub transfer_fee: f64,
}

impl Default for EconomyConfig {
    fn default() -> Self {
        Self {
            starting_balance: 5000.0,
            max_cash: 100000.0,
            transaction_tax: 0.05,
            deposit_interest_rate: 0.02,
            max_loan_amount: 500000.0,
            transfer_fee: 50.0,
        }
    }
}

impl EconomyPlugin {
    pub fn new() -> Self {
        let info = PluginInfo {
            id: "economy-example".to_string(),
            name: "Economy Example".to_string(),
            version: semver::Version::parse("1.0.0").unwrap(),
            author: "GameVerse Team".to_string(),
            description: Some("Advanced economy system with currency management".to_string()),
            dependencies: vec![
                gameverse_core::plugins::PluginDependency {
                    name: "core".to_string(),
                    version_req: semver::VersionReq::parse(">=0.1.0").unwrap(),
                    optional: false,
                },
            ],
            permissions: vec![
                "economy.balance".to_string(),
                "economy.transfer".to_string(),
                "economy.deposit".to_string(),
                "economy.withdraw".to_string(),
            ],
            website: Some("https://gameverse.dev/plugins/economy".to_string()),
        };

        Self {
            info,
            players: Arc::new(RwLock::new(HashMap::new())),
            config: EconomyConfig::default(),
            total_money_in_circulation: Arc::new(RwLock::new(0.0)),
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    pub async fn get_balance(&self, player_id: u64) -> Option<(f64, f64)> {
        let players = self.players.read().await;
        players.get(&player_id).map(|p| (p.cash, p.bank_balance))
    }

    /// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
    pub async fn transfer_money(
        &self,
        from_player: u64,
        to_player: u64,
        amount: f64,
    ) -> PluginResult<String> {
        if amount <= 0.0 {
            return Err(PluginError::ApiError {
                reason: "Amount must be positive".to_string(),
            });
        }

        let mut players = self.players.write().await;

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        let from_player_data = players.get_mut(&from_player)
            .ok_or_else(|| PluginError::ApiError {
                reason: "From player not found".to_string(),
            })?;

        if from_player_data.cash < amount + self.config.transfer_fee {
            return Err(PluginError::ApiError {
                reason: "Insufficient funds (including transfer fee)".to_string(),
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if !players.contains_key(&to_player) {
            return Err(PluginError::ApiError {
                reason: "To player not found".to_string(),
            });
        }

        // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        let transaction_id = uuid::Uuid::new_v4().to_string();
        let transaction = Transaction {
            id: transaction_id.clone(),
            from_player: Some(from_player),
            to_player: Some(to_player),
            amount,
            transaction_type: TransactionType::Transfer,
            timestamp: Utc::now(),
            description: format!("Transfer from {} to {}", from_player, to_player),
        };

        // –°–ø–∏—Å–∞—Ç—å —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)
        if let Some(from) = players.get_mut(&from_player) {
            from.cash -= amount + self.config.transfer_fee;
            from.transaction_history.push(transaction.clone());
        }

        // –ó–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if let Some(to) = players.get_mut(&to_player) {
            to.cash += amount;
            to.transaction_history.push(transaction);
        }

        println!("üí∞ Transfer completed: {} sent ${:.2} to {} (fee: ${:.2})", 
                from_player, amount, to_player, self.config.transfer_fee);

        Ok(transaction_id)
    }

    /// –í–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫
    pub async fn deposit_to_bank(&self, player_id: u64, amount: f64) -> PluginResult<()> {
        if amount <= 0.0 {
            return Err(PluginError::ApiError {
                reason: "Amount must be positive".to_string(),
            });
        }

        let mut players = self.players.write().await;
        let player = players.get_mut(&player_id)
            .ok_or_else(|| PluginError::ApiError {
                reason: "Player not found".to_string(),
            })?;

        if player.cash < amount {
            return Err(PluginError::ApiError {
                reason: "Insufficient cash".to_string(),
            });
        }

        // –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç
        player.cash -= amount;
        player.bank_balance += amount;

        let transaction = Transaction {
            id: uuid::Uuid::new_v4().to_string(),
            from_player: Some(player_id),
            to_player: None,
            amount,
            transaction_type: TransactionType::Deposit,
            timestamp: Utc::now(),
            description: "Bank deposit".to_string(),
        };
        player.transaction_history.push(transaction);

        println!("üè¶ Bank deposit: Player {} deposited ${:.2}", player_id, amount);

        Ok(())
    }

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
    pub async fn create_player(&self, player_id: u64, player_name: String) -> PluginResult<()> {
        let mut players = self.players.write().await;
        
        if players.contains_key(&player_id) {
            return Err(PluginError::ApiError {
                reason: "Player already exists".to_string(),
            });
        }

        let new_player = EconomyPlayer {
            id: player_id,
            name: player_name.clone(),
            cash: self.config.starting_balance,
            bank_balance: 0.0,
            last_login: Utc::now(),
            transaction_history: vec![],
        };

        players.insert(player_id, new_player);

        // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
        {
            let mut total = self.total_money_in_circulation.write().await;
            *total += self.config.starting_balance;
        }

        println!("üë§ New player created: {} (ID: {}) with starting balance ${:.2}", 
                player_name, player_id, self.config.starting_balance);

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫–æ–Ω–æ–º–∏–∫–∏
    pub async fn get_economy_stats(&self) -> EconomyStats {
        let players = self.players.read().await;
        let total_circulation = *self.total_money_in_circulation.read().await;

        let total_players = players.len();
        let total_cash: f64 = players.values().map(|p| p.cash).sum();
        let total_bank: f64 = players.values().map(|p| p.bank_balance).sum();

        EconomyStats {
            total_players,
            total_cash,
            total_bank_balance: total_bank,
            total_money_in_circulation: total_circulation,
            average_player_wealth: if total_players > 0 { 
                (total_cash + total_bank) / total_players as f64 
            } else { 
                0.0 
            },
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
#[derive(Debug, Serialize, Deserialize)]
pub struct EconomyStats {
    pub total_players: usize,
    pub total_cash: f64,
    pub total_bank_balance: f64,
    pub total_money_in_circulation: f64,
    pub average_player_wealth: f64,
}

impl GameVersePlugin for EconomyPlugin {
    fn info(&self) -> PluginInfo {
        self.info.clone()
    }

    fn initialize(&mut self, _context: &PluginContext) -> PluginResult<()> {
        println!("üöÄ Economy plugin initializing...");
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, etc.
        println!("üíº Economy config loaded:");
        println!("   Starting balance: ${:.2}", self.config.starting_balance);
        println!("   Max cash: ${:.2}", self.config.max_cash);
        println!("   Transfer fee: ${:.2}", self.config.transfer_fee);
        
        println!("‚úÖ Economy plugin initialized successfully!");
        Ok(())
    }

    fn finalize(&mut self) -> PluginResult<()> {
        println!("üõë Economy plugin shutting down...");
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let stats = tokio::runtime::Handle::current().block_on(self.get_economy_stats());
        println!("üìä Final economy stats:");
        println!("   Total players: {}", stats.total_players);
        println!("   Total money: ${:.2}", stats.total_money_in_circulation);
        
        println!("‚úÖ Economy plugin finalized!");
        Ok(())
    }

    fn on_player_connect(&self, player_id: u64) -> PluginResult<()> {
        println!("üëã Player {} connected to economy system", player_id);
        
        // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let player_name = format!("Player_{}", player_id);
        tokio::runtime::Handle::current().block_on(async {
            if let Err(e) = self.create_player(player_id, player_name).await {
                // –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if !e.to_string().contains("already exists") {
                    println!("‚ö†Ô∏è Failed to create player {}: {}", player_id, e);
                }
            }
        });

        Ok(())
    }

    fn on_player_disconnect(&self, player_id: u64) -> PluginResult<()> {
        println!("üëã Player {} disconnected from economy system", player_id);
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
        tokio::runtime::Handle::current().block_on(async {
            let mut players = self.players.write().await;
            if let Some(player) = players.get_mut(&player_id) {
                player.last_login = Utc::now();
                println!("üíæ Saved player {} data", player_id);
            }
        });

        Ok(())
    }
} 