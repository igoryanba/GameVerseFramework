use anyhow::{Context, Result};
use clap::{Args, Subcommand};
use regex::Regex;
use std::path::{Path, PathBuf};
use tokio::{fs, io::AsyncWriteExt};
use tracing::info;

#[derive(Subcommand)]
pub enum MigrateCommands {
    /// Конвертировать ресурс FiveM (fxmanifest.lua) в GameVerse формат
    FivemResource(FivemResourceArgs),
}

#[derive(Args, Debug)]
pub struct FivemResourceArgs {
    /// Путь к директории ресурса или к файлу fxmanifest.lua
    #[arg(long)]
    pub path: String,

    /// Выходная директория (по умолчанию та же)
    #[arg(long)]
    pub output: Option<String>,
}

pub async fn execute(cmd: MigrateCommands, _config: &crate::config::Config) -> Result<()> {
    match cmd {
        MigrateCommands::FivemResource(args) => migrate_fivem_resource(args).await?,
    }
    Ok(())
}

/// Минимально жизнеспособный транспилер fxmanifest.lua → gameverse.toml (v0.1)
async fn migrate_fivem_resource(args: FivemResourceArgs) -> Result<()> {
    let input_path = PathBuf::from(&args.path);
    let fx_path = if input_path.is_dir() {
        input_path.join("fxmanifest.lua")
    } else {
        input_path.clone()
    };

    let content = fs::read_to_string(&fx_path)
        .await
        .with_context(|| format!("Cannot read {:?}", fx_path))?;

    let mut toml_output = String::from("# Auto-generated by GameVerse CLI\n[resource]\n");

    let re_kv = Regex::new(r"^(\w+)\s+'([^']+)'?").unwrap();
    let re_table = Regex::new(r"^(\w+)_scripts\s+\{([^}]+)\}").unwrap();

    for line in content.lines() {
        let trimmed = line.trim();
        if trimmed.starts_with("--") || trimmed.is_empty() {
            continue;
        }
        if let Some(caps) = re_kv.captures(trimmed) {
            let key = &caps[1];
            let val = &caps[2];
            match key {
                "fx_version" => toml_output.push_str(&format!("fx_version = \"{}\"\n", val)),
                "game" => toml_output.push_str(&format!("game = \"{}\"\n", val)),
                "lua54" => toml_output.push_str(&format!("lua54 = {}\n", val)),
                _ => {
                    // Неизвестные KV — пишем в секцию extras
                    toml_output.push_str(&format!("{} = \"{}\"\n", key, val));
                }
            }
        } else if let Some(caps) = re_table.captures(trimmed) {
            let table_name = &caps[1];
            let list_raw = &caps[2];
            let files: Vec<&str> = list_raw
                .split(',')
                .map(|s| s.trim().trim_matches('\''))
                .filter(|s| !s.is_empty())
                .collect();
            if !files.is_empty() {
                toml_output.push_str(&format!("{} = [\n", table_name));
                for f in files {
                    toml_output.push_str(&format!("  \"{}\",\n", f));
                }
                toml_output.push_str("]\n");
            }
        }
    }

    // Save gameverse.toml
    let output_dir = args.output.map(PathBuf::from).unwrap_or_else(|| fx_path.parent().unwrap_or(Path::new(".")).to_path_buf());
    fs::create_dir_all(&output_dir).await?;
    let out_file = output_dir.join("gameverse.toml");
    let mut file = fs::File::create(&out_file).await?;
    file.write_all(toml_output.as_bytes()).await?;

    info!("✅ Сгенерирован {:?}", out_file);
    Ok(())
} 