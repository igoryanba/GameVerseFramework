use crate::domain::{ChatError, ChatMessage, MessageType, ChatEvent};
use crate::config::TelegramConfig;
use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::sync::Arc;
use teloxide::{Bot, types::{ChatId, MessageId}, requests::Requester, payloads::SendMessageSetters};
use tokio::sync::mpsc;
use tracing::{info, error};
use uuid::Uuid;

#[derive(Debug, Clone)]
pub struct TelegramService {
    bot: Bot,
    config: TelegramConfig,
    client: Client,
    event_sender: Option<mpsc::Sender<ChatEvent>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TelegramMessage {
    pub chat_id: i64,
    pub message_id: i32,
    pub from_user_id: Option<i64>,
    pub text: Option<String>,
    pub date: i32,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SendMessageRequest {
    pub chat_id: i64,
    pub text: String,
    pub parse_mode: Option<String>,
    pub reply_to_message_id: Option<i32>,
    pub disable_notification: Option<bool>,
}

impl TelegramService {
    pub fn new(
        config: TelegramConfig,
        event_sender: Option<mpsc::Sender<ChatEvent>>,
    ) -> Result<Self, ChatError> {
        if config.bot_token.is_empty() {
            return Err(ChatError::Configuration { 
                message: "Telegram bot token is not configured".to_string() 
            });
        }

        let bot = Bot::new(&config.bot_token);
        let client = Client::new();

        Ok(Self {
            bot,
            config,
            client,
            event_sender,
        })
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç
    pub async fn send_message(
        &self,
        chat_id: i64,
        text: String,
        reply_to: Option<i32>,
    ) -> Result<i32, ChatError> {
        if !self.config.enabled {
            return Err(ChatError::Configuration { 
                message: "Telegram integration is disabled".to_string() 
            });
        }

        let mut request = self.bot.send_message(ChatId(chat_id), text);
        
        if let Some(reply_id) = reply_to {
            request = request.reply_to_message_id(MessageId(reply_id));
        }

        match request.await {
            Ok(message) => {
                info!("Message sent to Telegram chat {}: {}", chat_id, message.id.0);
                Ok(message.id.0)
            }
            Err(e) => {
                error!("Failed to send message to Telegram: {}", e);
                Err(ChatError::Telegram(format!("Failed to send message: {}", e)))
            }
        }
    }

    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    pub fn format_game_message(&self, message: &ChatMessage, player_name: Option<&str>) -> String {
        let player_name = player_name.unwrap_or("Unknown Player");
        
        let prefix = match message.message_type {
            MessageType::Text => "",
            MessageType::Action => "üé≠ ",
            MessageType::Ooc => "üí¨ [OOC] ",
            MessageType::Radio => "üìª [RADIO] ",
            MessageType::Phone => "üìû [PHONE] ",
            MessageType::Admin => "‚ö†Ô∏è [ADMIN] ",
            MessageType::System => "üîß [SYSTEM] ",
            MessageType::Dice => "üé≤ ",
        };

        let content = if message.message_type == MessageType::Action {
            format!("*{} {}*", player_name, message.content)
        } else {
            format!("**{}**: {}", player_name, message.content)
        };

        format!("{}{}", prefix, content)
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram —á–∞—Ç
    pub async fn forward_game_message(
        &self,
        message: &ChatMessage,
        telegram_chat_id: i64,
        player_name: Option<&str>,
    ) -> Result<(), ChatError> {
        let formatted_message = self.format_game_message(message, player_name);
        
        self.send_message(telegram_chat_id, formatted_message, None).await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
    pub async fn handle_telegram_message(
        &self,
        telegram_message: TelegramMessage,
        linked_channel_id: Uuid,
    ) -> Result<(), ChatError> {
        if let Some(text) = telegram_message.text.clone() {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            if text.starts_with('/') {
                return self.handle_telegram_command(telegram_message, text).await;
            }

            // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
            let game_message = ChatMessage {
                id: Uuid::new_v4(),
                channel_id: linked_channel_id,
                sender_id: Uuid::new_v4(), // TODO: —Å–≤—è–∑–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                content: format!("üì± {}", text),
                message_type: MessageType::Text,
                reply_to: None,
                forwarded_from: None,
                edited_at: None,
                deleted_at: None,
                created_at: chrono::Utc::now(),
                updated_at: chrono::Utc::now(),
                metadata: Some(serde_json::json!({
                    "telegram_user_id": telegram_message.from_user_id,
                    "telegram_message_id": telegram_message.message_id,
                    "telegram_chat_id": telegram_message.chat_id
                })),
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if let Some(event_sender) = &self.event_sender {
                let event = ChatEvent::NewMessage(game_message);
                if let Err(e) = event_sender.send(event).await {
                    error!("Failed to send chat event: {}", e);
                }
            }
        }

        Ok(())
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞
    async fn handle_telegram_command(
        &self,
        telegram_message: TelegramMessage,
        command: String,
    ) -> Result<(), ChatError> {
        let parts: Vec<&str> = command.splitn(2, ' ').collect();
        let cmd = parts[0];
        let args = parts.get(1).unwrap_or(&"");

        let response = match cmd {
            "/start" => {
                "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameVerse Chat!\n\n\
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\
                /link <–∫–æ–¥> - –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –∏–≥—Ä–æ–≤—ã–º\n\
                /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏\n\
                /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            }
            "/help" => {
                "üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n\
                /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\
                /link <–∫–æ–¥> - –°–≤—è–∑–∞—Ç—å Telegram —Å –∏–≥—Ä–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n\
                /unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n\
                /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏\n\
                /notify on/off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\
                /channels - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
            }
            "/link" => {
                if args.is_empty() {
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: /link <–∫–æ–¥>\n\
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –º–æ–∂–Ω–æ –≤ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /telegram"
                } else {
                    // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                    "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏..."
                }
            }
            "/status" => {
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                "üìä –°—Ç–∞—Ç—É—Å: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n\
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link <–∫–æ–¥> –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏"
            }
            _ => "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        };

        self.send_message(telegram_message.chat_id, response.to_string(), None).await?;
        
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    pub async fn send_admin_notification(&self, message: String) -> Result<(), ChatError> {
        if let Some(admin_chat_id) = &self.config.admin_chat_id {
            if let Ok(chat_id) = admin_chat_id.parse::<i64>() {
                let formatted_message = format!("üîî **Admin Notification**\n\n{}", message);
                self.send_message(chat_id, formatted_message, None).await?;
            }
        }
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
    pub async fn send_system_notification(
        &self,
        chat_id: i64,
        event_type: &str,
        details: &str,
    ) -> Result<(), ChatError> {
        let emoji = match event_type {
            "player_join" => "üëã",
            "player_leave" => "üëã",
            "server_restart" => "üîÑ",
            "maintenance" => "üîß",
            "error" => "‚ùå",
            _ => "üì¢",
        };

        let message = format!("{} **System Notification**\n\n{}", emoji, details);
        self.send_message(chat_id, message, None).await?;
        
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
    pub async fn check_connection(&self) -> Result<bool, ChatError> {
        match self.bot.get_me().await {
            Ok(user) => {
                info!("Telegram bot connected: @{}", user.username.clone().unwrap_or_default());
                Ok(true)
            }
            Err(e) => {
                error!("Failed to connect to Telegram: {}", e);
                Err(ChatError::Telegram(format!("Connection failed: {}", e)))
            }
        }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    pub async fn get_chat_info(&self, chat_id: i64) -> Result<serde_json::Value, ChatError> {
        match self.bot.get_chat(ChatId(chat_id)).await {
            Ok(chat) => {
                let info = serde_json::json!({
                    "id": chat.id,
                    "type": format!("{:?}", chat.kind),
                    "title": chat.title(),
                    "username": chat.username(),
                    "description": chat.description(),
                });
                Ok(info)
            }
            Err(e) => {
                error!("Failed to get chat info: {}", e);
                Err(ChatError::Telegram(format!("Failed to get chat info: {}", e)))
            }
        }
    }
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
pub async fn setup_telegram_bot(
    config: &TelegramConfig,
    event_sender: mpsc::Sender<ChatEvent>,
) -> Result<Arc<TelegramService>, ChatError> {
    if !config.enabled {
        info!("Telegram integration disabled");
        return Err(ChatError::Configuration { 
            message: "Telegram integration is disabled".to_string() 
        });
    }

    let service = Arc::new(TelegramService::new(config.clone(), Some(event_sender))?);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    service.check_connection().await?;
    
    info!("Telegram bot service initialized successfully");
    
    Ok(service)
}

/// –¢–∏–ø—ã Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum TelegramEventType {
    Message,
    EditedMessage,
    CallbackQuery,
    InlineQuery,
    ChatMember,
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Telegram
pub struct TelegramEventHandler {
    service: Arc<TelegramService>,
}

impl TelegramEventHandler {
    pub fn new(service: Arc<TelegramService>) -> Self {
        Self { service }
    }

    pub async fn handle_event(
        &self,
        event_type: TelegramEventType,
        data: serde_json::Value,
    ) -> Result<(), ChatError> {
        match event_type {
            TelegramEventType::Message => {
                // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                info!("Received Telegram message: {:?}", data);
            }
            TelegramEventType::EditedMessage => {
                // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                info!("Received edited Telegram message: {:?}", data);
            }
            TelegramEventType::CallbackQuery => {
                // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫
                info!("Received Telegram callback query: {:?}", data);
            }
            _ => {
                info!("Unhandled Telegram event type: {:?}", event_type);
            }
        }
        
        Ok(())
    }
} 