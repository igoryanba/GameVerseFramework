use gameverse_inventory::{
    Config,
    repositories::{
        PostgresInventoryRepository, PostgresItemRepository, PostgresItemTemplateRepository
    },
    services::{InventoryService, ItemService},
    http::server::create_http_server,
    grpc::service::GrpcInventoryService
};
use gameverse_logging::Logger;
use sqlx::PgPool;
use std::sync::Arc;
use std::net::SocketAddr;
use tonic::transport::Server;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è GameVerse Framework...");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::from_env();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    let logger = Arc::new(Logger::new("inventory-service"));
    logger.add_handler(gameverse_logging::ConsoleLogHandler).await;
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:");
    println!("   - GRPC: {}:{}", config.grpc.host, config.grpc.port);
    println!("   - HTTP: {}:{}", config.http.host, config.http.port);
    println!("   - Database: {}", config.database.url);
    
    logger.info("startup", "–°–µ—Ä–≤–∏—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è GameVerse Framework –∑–∞–ø—É—â–µ–Ω").await.ok();
    logger.info("config", &format!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: GRPC {}:{}, HTTP {}:{}", 
        config.grpc.host, config.grpc.port, config.http.host, config.http.port)).await.ok();
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info("database", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...").await.ok();
    println!("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    
    let pool = PgPool::connect(&config.database.url)
        .await
        .map_err(|e| {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}", e);
            e
        })?;
    
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    logger.info("database", "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL").await.ok();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    println!("üèóÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...");
    let inventory_repository = Arc::new(PostgresInventoryRepository::new(pool.clone()));
    let item_repository = Arc::new(PostgresItemRepository::new(pool.clone()));
    let item_template_repository = Arc::new(PostgresItemTemplateRepository::new(pool.clone()));
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    println!("‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...");
    let inventory_service = Arc::new(InventoryService::new(
        inventory_repository.clone(),
        item_repository.clone(),
    ));
    let item_service = Arc::new(ItemService::new(
        item_repository.clone(),
        item_template_repository.clone(),
        inventory_service.clone(),
    ));
    
    logger.info("services", "–°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã").await.ok();
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
    let http_addr: SocketAddr = format!("{}:{}", config.http.host, config.http.port)
        .parse()
        .map_err(|e| {
            eprintln!("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
            e
        })?;
    
    let grpc_addr: SocketAddr = format!("{}:{}", config.grpc.host, config.grpc.port)
        .parse()
        .map_err(|e| {
            eprintln!("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å gRPC —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
            e
        })?;
    
    println!("üéØ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    println!("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:");
    println!("   - HTTP API: http://{}", http_addr);
    println!("   - gRPC API: grpc://{}", grpc_addr);
    println!("   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{}/docs (TODO)", http_addr);
    println!("   - Health check: http://{}/health (TODO)", http_addr);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ gRPC —Å–µ—Ä–≤–µ—Ä–∞
    let grpc_service = GrpcInventoryService::create_server(
        inventory_service.clone(),
        item_service.clone(),
    );
    
    println!("üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...");
    logger.info("servers", "–ó–∞–ø—É—Å–∫ HTTP –∏ gRPC —Å–µ—Ä–≤–µ—Ä–æ–≤").await.ok();
    
    // –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let http_server = tokio::spawn(async move {
        println!("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {}...", http_addr);
        create_http_server(inventory_service, item_service, http_addr).await
    });
    
    let grpc_server = tokio::spawn(async move {
        println!("üîó gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {}...", grpc_addr);
        Server::builder()
            .add_service(grpc_service)
            .serve(grpc_addr)
            .await
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e))
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤
    tokio::select! {
        http_result = http_server => {
            match http_result {
                Ok(Ok(_)) => println!("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"),
                Ok(Err(e)) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
                    logger.info("http_error", &format!("–û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e)).await.ok();
                    return Err(e.into());
                }
                Err(e) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
                    return Err(e.into());
                }
            }
        }
        grpc_result = grpc_server => {
            match grpc_result {
                Ok(Ok(_)) => println!("‚úÖ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"),
                Ok(Err(e)) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
                    logger.info("grpc_error", &format!("–û—à–∏–±–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: {}", e)).await.ok();
                    return Err(e.into());
                }
                Err(e) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ gRPC —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
                    return Err(e.into());
                }
            }
        }
    }
    
    // Graceful shutdown
    logger.info("shutdown", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è").await.ok();
    println!("üëã –°–µ—Ä–≤–∏—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    Ok(())
} 