use anyhow::Result;
use clap::{Parser};
use std::path::PathBuf;
use tracing::{info, warn};
use tracing_subscriber;

use fivem_analyzer::{benchmarks, utils};

#[derive(Parser)]
#[command(name = "resource-benchmark")]
#[command(about = "GameVerse Framework - Resource Performance Benchmark Tool")]
#[command(version = "0.1.0")]
pub struct Cli {
    /// Path to resource directory
    #[arg(short, long)]
    pub path: PathBuf,
    
    /// Duration of benchmark in seconds
    #[arg(short, long, default_value = "60")]
    pub duration: u64,
    
    /// Include detailed memory analysis
    #[arg(short, long)]
    pub memory_analysis: bool,
    
    /// Output format (json, yaml, table)
    #[arg(short, long, default_value = "table")]
    pub format: String,
    
    /// Enable verbose logging
    #[arg(short, long)]
    pub verbose: bool,
    
    /// Number of concurrent users to simulate
    #[arg(short, long, default_value = "1")]
    pub concurrent_users: u32,
    
    /// Save results to file
    #[arg(short, long)]
    pub save_to: Option<PathBuf>,
}

#[tokio::main]
async fn main() -> Result<()> {
    let cli = Cli::parse();
    
    // Initialize logging
    let log_level = if cli.verbose { "debug" } else { "info" };
    tracing_subscriber::fmt()
        .with_env_filter(format!("resource_benchmark={}", log_level))
        .init();
        
    info!("‚ö° Resource Benchmark Tool v0.1.0 - Starting...");
    info!("üì¶ Resource: {:?}", cli.path);
    info!("‚è±Ô∏è  Duration: {}s", cli.duration);
    info!("üë• Concurrent users: {}", cli.concurrent_users);
    
    if !cli.path.exists() {
        warn!("‚ö†Ô∏è  Resource path does not exist: {:?}", cli.path);
        return Err(anyhow::anyhow!("Resource path not found"));
    }
    
    // Run benchmark
    info!("üöÄ Starting performance benchmark...");
    
    let results = benchmarks::comprehensive_benchmark(
        &cli.path, 
        cli.duration, 
        cli.memory_analysis
    ).await?;
    
    // Output results
    utils::output_benchmark_results(&results, &cli.format)?;
    
    // Save to file if requested
    if let Some(save_path) = cli.save_to {
        info!("üíæ Saving results to: {:?}", save_path);
        save_results_to_file(&results, &save_path, &cli.format).await?;
    }
    
    // Performance summary
    print_performance_summary(&results);
    
    info!("‚úÖ Benchmark completed successfully!");
    Ok(())
}

async fn save_results_to_file(
    results: &fivem_analyzer::types::BenchmarkResults,
    path: &PathBuf,
    format: &str,
) -> Result<()> {
    let content = match format {
        "json" => serde_json::to_string_pretty(results)?,
        "yaml" => serde_yaml::to_string(results)?,
        _ => return Err(anyhow::anyhow!("Unsupported format for file save: {}", format)),
    };
    
    tokio::fs::write(path, content).await?;
    info!("üíæ Results saved to: {:?}", path);
    Ok(())
}

fn print_performance_summary(results: &fivem_analyzer::types::BenchmarkResults) {
    println!("\nüéØ –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    let overall_improvement = results.improvement_factors.overall_improvement_factor;
    
    if overall_improvement > 10.0 {
        println!("üöÄ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {}x —É–ª—É—á—à–µ–Ω–∏–µ!", overall_improvement);
        println!("   GameVerse –ø—Ä–∏–Ω–µ—Å–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    } else if overall_improvement > 5.0 {
        println!("‚ö° –•–û–†–û–®–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {}x —É–ª—É—á—à–µ–Ω–∏–µ", overall_improvement);
        println!("   GameVerse –∑–∞–º–µ—Ç–Ω–æ —É–ª—É—á—à–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
    } else if overall_improvement > 2.0 {
        println!("üìà –£–ú–ï–†–ï–ù–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: {}x —É–ª—É—á—à–µ–Ω–∏–µ", overall_improvement);
        println!("   GameVerse –ø–æ–∫–∞–∂–µ—Ç –∑–∞–º–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è");
    } else {
        println!("üìä –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: {}x —É–ª—É—á—à–µ–Ω–∏–µ", overall_improvement);
        println!("   –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    }
    
    // –õ—É—á—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    let best_improvements = vec![
        ("UI", results.improvement_factors.ui_performance_factor),
        ("–ó–∞–ø—É—Å–∫", results.improvement_factors.startup_speedup_factor),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", results.improvement_factors.database_efficiency_factor),
        ("–ü–∞–º—è—Ç—å", results.improvement_factors.memory_reduction_factor),
        ("CPU", results.improvement_factors.cpu_efficiency_factor),
    ];
    
    let mut sorted_improvements = best_improvements.clone();
    sorted_improvements.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());
    
    println!("\nüèÜ –¢–û–ü-3 –£–õ–£–ß–®–ï–ù–ò–Ø:");
    for (i, (category, factor)) in sorted_improvements.iter().take(3).enumerate() {
        println!("   {}. {}: {}x —É–ª—É—á—à–µ–Ω–∏–µ", i + 1, category, factor);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    println!("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    if results.improvement_factors.ui_performance_factor > 10.0 {
        println!("   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ú–∏–≥—Ä–∞—Ü–∏—è UI –Ω–∞ WebAssembly");
    }
    if results.improvement_factors.memory_reduction_factor > 5.0 {
        println!("   ‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏");
    }
    if results.improvement_factors.startup_speedup_factor > 8.0 {
        println!("   ‚Ä¢ –ù–∞–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞");
    }
    
    println!("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ GameVerse Framework –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!");
} 